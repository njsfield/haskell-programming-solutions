Understanding Folds
===================

1) foldr (*) 1 [1..5]
   = 
   b) foldl (flip (*)) 1 [1..5]
   c) foldl (*) 1 [1..5]

   = 120

2) foldl (flip (*)) 1 [1..3]
  
   foldl :: (b -> a -> b) -> b -> [a] -> b

   steps
   -----

       a   b
   = ((1 * 1) * 2) * 3
   =  (2 * 1) * 3 
   =  (3 * 2)
   =   6

   foldl (flip (*)) 8 [10,12,14]

       a    b
   = ((10 * 8)  * 10) * 14 
   =  (12 * 80) * 3 
   =  (14 * 960)
   =   13440

3) One difference between foldr and foldl is
   
   c) foldr, but not foldl, associates to the right

4) Folds are catamorphisms, which means they are generally
   used to 

   a) reduce structure

5) 
   a) foldr (++) ["woot", "WOOT", "woot"]
      foldr (++) [] ["woot", "WOOT", "woot"]

   b) foldr max [] "fear is the little death"
      foldr max (minBound :: Char) "fear is the little death"

   c) foldr and True [False, True]
      foldr (&&) True [False, True]

   d) foldr (||) True [False, True]
      foldr (||) False [False, True]

   e) foldl ((++) . show) "" [1..5]
      foldl (flip ((++) . show)) "" [1..5]

               a       b
      = (((++) "1")    "")  [2,3,4,5]
      = (((++) "2")    "1") [3,4,5] 
      = (((++) "21")   "3") [4,5]
      = (((++) "321")  "4") [5]
      = (((++) "4321") "5") []

   f) foldr const 'a' [1..5]
      foldr (flip const) 'a' [1..5]

   g) foldr const 0 "tacos"
      foldr (flip const) 0 "tacos"

   h) foldl (flip const) 0 "burritos"
      foldl const 0 "burritos"

   i) foldl (flip const) 'z' [1..5]
      foldl const 'z' [1..5]
